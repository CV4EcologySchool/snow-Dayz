## Train / test / split

## data path 
##data = 
##norwayPath =
##olympexPath =
##snoqPath = 


def sequenceLookup(date, location):
    ## subset dataframe of location
    cameraIDsubset = data[data['location'] == location]
    timestamp = pd.to_datetime(date)
    
    ## turn date column into datetime column to be able to find time deltas
    ### look at all the days that you have from that camera
    ### look at all the images that you have from that file 
    times = pd.to_datetime(cameraIDsubset['Date']) 
    files = cameraIDsubset['File']
    
    before = []
    after = []
    rightBefore = []  
    rightAfter = []
    sequence = []
    ## find all the images that are close to it in time
    for (file, t) in zip(files, times):
        difference = timestamp - t
        diff = difference.total_seconds()  #days
        ######## first choice are images between 12-24 before and after 
        #### before
        if (abs(diff) >=43200) and (abs(diff) <= 86400): 
            if diff > 0: before.append(file)
            else: after.append(file)
        ### backups right before and right after
        elif (abs(diff) <= 43200): 
            if diff > 0: rightBefore.append(file)
            else: rightAfter.append(file) 

    #dictionary.update({filename: sequence})
    ## first choice list 
    after = sorted(after) 
    before = sorted(before)
    #print('after',after)
   # print('before',before)
    ## backup list 
    rightAfter = sorted(rightAfter) 
    #print('rightAfter',rightAfter)
    rightBefore = sorted(rightBefore)
    #print('rightBefore',rightBefore)
    #if (sum(before) > 0):
    #    finalBefore = before 
    #    else: finalBefore = rightBefore[0]
    if (len(before) > 0): finalBefore = before[0]
    elif (len(rightBefore)>0): finalBefore = rightBefore[0]
    else: finalBefore = 'na'
    if (len(after) > 0): finalAfter = after[0]
    elif len(rightAfter)>0: finalAfter = rightAfter[0]
    else: finalAfter = 'na'
    #finalAfter = after[0] if (len(after) > 0) else rightAfter[0]
    print({filename:[finalBefore,finalAfter]})
    return {filename:[finalBefore,finalAfter]}

## create sequences from data

## run this for each path 
def ImageWalkThrough(path):
    rainSequences1 = {}
    snowSequences1 = {}
    noneSequences1 = {}
    for file in glob.glob(path + str("*")): ## this crashes when run locally 
        if os.path.splitext(file)[1].lower() in ('.jpg', '.jpeg'):
            filename = file.split('/')[-1]
            index = data[data['File'] == filename].index
            if sum(index) > 0: ## make sure that the filename is in the dataframe
                weather = (data['Weather'][index].values.tolist())[0]
                date =  (data['Date'][index].values.tolist())[0]
                location = (data['location'][index].values.tolist())[0]
                if (weather == 'Snow'): 
                    snowSequences1.update(sequenceLookup(date = date, location = location))
                elif (weather == 'Rain'):
                    rainSequences1.update(sequenceLookup(date = date, location = location))
                elif (weather == 'None'):
                    noneSequences1.update(sequenceLookup(date = date, location = location))
    return (rainSequences1, snowSequences1, noneSequences1)

rainSequencesN, snowSequencesN, noneSequencesN = ImageWalkThrough(norwayPath)
rainSequencesO, snowSequencesO, noneSequencesO = ImageWalkThrough(olympexPath)
rainSequencesS, snowSequencesS noneSequencesS = ImageWalkThrough(snoqPath)

print('High-level Norway sequence statistics:\n')

print('Rain Sequences: '+str(len(rainSequencesN)))
print('Snow Sequences: '+str(len(snowSequencesN)))
print('No Weather Sequences: '+str(len(noneSequencesN)))

print('High-level Olympex sequence statistics:\n')

print('Rain Sequences: '+str(len(rainSequencesO)))
print('Snow Sequences: '+str(len(snowSequencesO)))
print('No Weather Sequences: '+str(len(noneSequencesO)))

print('High-level Snoqualmie sequence statistics:\n')

print('Rain Sequences: '+str(len(rainSequencesS)))
print('Snow Sequences: '+str(len(snowSequencesS)))
print('No Weather Sequences: '+str(len(noneSequencesS)))

#######################
We will 

